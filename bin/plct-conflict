#!/usr/bin/env python

# python libraries
import sys
import optparse

# plct libraries
import plct
from plct import plctlib
from plct import formatter

# rasmus, compbio libraries
from rasmus import treelib, util

#==========================================================
# parser

VERSION=plct.PROGRAM_VERSION_TEXT

parser = optparse.OptionParser(
    usage="usage: %prog [options] <treefile 1> ...",

    version="%prog " + VERSION,

    description=
    "%prog is a phylogenetic program for determining the " +
    "reconciliation feasibility of a gene tree under " +
    "gene duplication, loss, and coalescence " +
    "with multiple individual samples per species. " +
    "See http://www.cs.hmc.edu/~yjw/plct for details.",

    epilog=
    "Written by Yi-Chieh Wu (yjw@cs.hmc.edu), Harvey Mudd College. " +
    "(c) 2016. Released under the terms of the GNU General Public License.",

    formatter=formatter.IndentedHelpFormatterWithNL())
parser.add_option("-i", "--input", dest="input",
                  action="append",
                  metavar="<input file>",
                  help="list of input files, one per line")
parser.add_option("-o", "--output", dest="output",
                  default='-',
                  metavar="<output file>",
                  help="output file")
parser.add_option("-m", "--mapping", dest="mapping",
                  choices=["sli", "sil", "sli_", "sil_"],
                  default="sli",
                  metavar="[(sli)|sil|sli_|sil_]",
                  help="Specify leaf labeling format.\n" +
                       " - sli: species-locus-individual\n" +
                       " - sil: species-individual-locus\n" +
                       " - sli_ = species_locus_individual\n" +
                       " - sil_ = species_individual_locus")
parser.add_option("--outputext", dest="outputext",
                  metavar="<output extension>",
                  help="if provided, annotates gene tree " +
                  "and returns in NHX format")
options, args = parser.parse_args()

# determine input files
def get_files():
    for arg in args:
        yield arg

    if options.input:
        for arg in options.input:
            with util.smart_open_stream(arg, 'r') as f:
                for line in f:
                    yield line.rstrip('\n')

if len(args) == 0 and not options.input:
    parser.error("must specify input file(s)")


#==========================================================
# utilities

def labels_to_str(labels):
    return '(' + ','.join(sorted(['-'.join(label) for label in labels])) + ')'

#==========================================================
# main

with util.smart_open_stream(options.output, 'w') as out:
    for treefile in get_files():
        tree = treelib.read_tree(treefile)

        # reroot tree if unrooted (choose arbitrary root)
        if not treelib.is_rooted(tree):
            treelib.reroot(tree, sorted(tree.leaf_names())[0], newCopy=False)

        # determine conflicts
        is_reconcilable, conflicts = plctlib.is_reconcilable(tree,
                                                             mapping=options.mapping,
                                                             annotate=True if options.outputext else False,
                                                             return_conflicts=True)

        # statistics
        nleaves = len(tree.leaves())

        species = set()
        labels = set()
        for node in tree:
            species.update([it[0] for it in node.data["labels"]])
            labels.update(node.data["labels"])
        nspecies = len(species)
        nlabels = len(labels)

        is_trivial = nspecies == nlabels # one label per species

        # output table
        if conflicts:
            conflicts = [labels_to_str(labels) for labels in conflicts]
            conflicts_str = ','.join(conflicts)
        else:
            conflicts_str = '-'

        outstring = '\t'.join([treefile,
                               str(nleaves),
                               str(nspecies), str(nlabels),
                               str(is_trivial),
                               str(is_reconcilable),
                               conflicts_str])
        out.write(outstring + '\n')

        # output tree
        if options.outputext:
            for node in tree:
                if node.data["labels"]:
                    node.data["labels"] = labels_to_str(node.data["labels"])
                else:
                    del node.data["labels"]
            treeoutfile = treefile + options.outputext
            tree.write(treeoutfile, writeData=treelib.write_nhx_data)

