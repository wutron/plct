#!/usr/bin/env python

# python libraries
import os
import sys
import optparse

# networkx library
import networkx as nx

# plct libraries
import plct
from plct import plctlib
from plct import formatter

# rasmus, compbio libraries
from rasmus import treelib, util

#==========================================================
# parser

VERSION=plct.PROGRAM_VERSION_TEXT

def parse_args():
    """Parse input arguments"""

    parser = optparse.OptionParser(
        usage="usage: %prog [options] <treefile 1> ...",

        version="%prog " + VERSION,

        description=
        "%prog is a phylogenetic program for determining the " +
        "reconciliation feasibility of a gene tree under " +
        "gene duplication, loss, and coalescence " +
        "with multiple individual samples per species. " +
        "See http://www.cs.hmc.edu/~yjw/plct for details.",

        epilog=
        "Written by Yi-Chieh Wu (yjw@cs.hmc.edu), Harvey Mudd College. " +
        "(c) 2016. Released under the terms of the GNU General Public License.",

        formatter=formatter.IndentedHelpFormatterWithNL())

    grp_input = optparse.OptionGroup(parser, "Input Options")
    grp_input.add_option("-i", "--input", dest="input",
                         action="append",
                         metavar="<input file>",
                         help="list of input files, one per line")
    grp_input.add_option("-m", "--mapping", dest="mapping",
                         choices=["sli", "sil", "sli_", "sil_"],
                         default="sli",
                         metavar="[(sli)|sil|sli_|sil_]",
                         help="leaf labeling format\n" +
                              " - sli: species-locus-individual\n" +
                              " - sil: species-individual-locus\n" +
                              " - sli_ = species_locus_individual\n" +
                              " - sil_ = species_individual_locus")
    grp_input.add_option("-d", "--dir", dest="dir",
                         default=False, action="store_true",
                         help="identify trees by their directory")
    grp_input.add_option("--inputext", dest="inputext",
                         metavar="<input extension>",
                         default="",
                         help="input extension (default \"\")")
    parser.add_option_group(grp_input)

    grp_output = optparse.OptionGroup(parser, "Output Options")
    grp_output.add_option("-o", "--output", dest="output",
                          default='-',
                          metavar="<output file>",
                          help="output file")
    grp_output.add_option("--outputext", dest="outputext",
                          metavar="<output extension>",
                          help="if provided, write out the plct and leg")
    parser.add_option_group(grp_output)

    options, args = parser.parse_args()

    # determine input files
    if len(args) == 0 and not options.input:
        parser.error("must specify input file(s)")

    return options, args

#==========================================================
# utilities

def get_files(options):
    for arg in args:
        yield arg

    if options.input:
        for arg in options.input:
            with util.smart_open_stream(arg, 'r') as f:
                for line in f:
                    yield line.rstrip('\n')

def labels_to_str(labels):
    return '(' + ','.join(sorted(map(str, labels))) + ')'

#==========================================================
# main

options, args = parse_args()

with util.smart_open_stream(options.output, 'w') as out:
    for treefile in get_files(options):
        # read tree
        tree = treelib.read_tree(treefile)
        if options.dir:
            treename = os.path.basename(os.path.dirname(treefile))
        else:
            treename = treefile

        # reroot tree if unrooted (choose arbitrary root)
        if not treelib.is_rooted(tree):
            treelib.reroot(tree, sorted(tree.leaf_names())[0], newCopy=False)

        # determine reconciliation feasibility
        is_reconcilable, conflicts, leg = \
            plctlib.is_reconcilable(tree,
                                    mapping=options.mapping,
                                    annotate=True if options.outputext else False,
                                    return_conflicts=True,
                                    return_leg=True)

        # statistics
        nleaves = len(tree.leaves())

        species = set()
        labels = set()
        for node in tree:
            species.update([label.species for label in node.data["labels"]])
            labels.update(node.data["labels"])
        nspecies = len(species)
        nlabels = len(labels)

        is_binary = treelib.is_binary(tree)

        is_trivial = nspecies == nlabels # one label per species

        # output table
        if conflicts:
            conflicts_toks = [labels_to_str(labels) for labels in conflicts]
            conflicts_str = ','.join(conflicts_toks)
        else:
            conflicts_str = '-'

        outstring = '\t'.join([treename,
                               str(nleaves),
                               str(nspecies), str(nlabels),
                               str(is_binary),
                               str(is_trivial),
                               str(is_reconcilable),
                               conflicts_str])
        out.write(outstring + '\n')

        if options.outputext:
            outfile = util.replace_ext(treefile, options.inputext, options.outputext)
            with util.smart_open_stream(outfile, 'w') as out_annotate:
                # output plct
                out_annotate.write("PLCT:\n")
                for node in tree:
                    if node.data["labels"]:
                        node.data["labels"] = labels_to_str(node.data["labels"])
                    else:
                        del node.data["labels"]
                tree.write(out_annotate, writeData=treelib.write_nhx_data)
                out_annotate.write('\n')

                # output leg
                out_annotate.write("LEG:\n")
                for line in nx.generate_adjlist(leg):
                    out_annotate.write(line.replace(' ', '\t') + '\n')
                out_annotate.write('\n')

                # output cc
                out_annotate.write("CC:\n")
                for cc in nx.connected_components(leg):
                    cc = tuple(sorted(cc))
                    cc_toks = cc + (cc not in conflicts,)
                    out_annotate.write('\t'.join(map(str, cc_toks)) + '\n')

